# Minimal makefile for Sphinx documentation
# This file was autogenerated with sphinx-quickstart aside from custom
# `make doc` command for LaTeX and test for pytest testing

# You can set these variables from the command line, and also
# from the environment for the first two.
SPHINXOPTS    ?=
SPHINXBUILD   ?= sphinx-build
SOURCEDIR     = ./docs
BUILDDIR      = ./docs

# Put it first so that "make" without argument is like "make help".
help:
	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)

doc:
	@sphinx-build -M latexpdf ./docs/ ./docs/
	@mv ./docs/latex/packingtest.pdf ./docs/main.pdf

test:
	@pytest ./test/

# remember that any new line in a Makefile is executed in a new shell; the
# @ makes only genuine output appear and suppresses the actual command:
lint:
	@cd py_src/ && mypy --config-file ../setup.cfg ../py_src
	@flake8 py_src/ && echo 'flake8: success'

# Use something like @rm -rf <file> 2>>/dev/null || echo "does not exist" to
# remove <file> and receive an appropriate error if it does not exist
clean:
	@rm -rf py_src/__pycache__
	@rm -rf py_src/sub_module/__pycache__
	@rm -rf test/__pycache__
	@rm -rf docs/doctrees
	@rm -rf docs/latex
	@rm -rf docs/html
	@mv ./docs/latex/packagingtest.pdf ./docs/main.pdf 2>>/dev/null || echo "no updated docs available"

.PHONY: help doc test lint clean Makefile

# Catch-all target: route all unknown targets to Sphinx using the new
# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
%: Makefile
	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
